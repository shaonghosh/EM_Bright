#!/usr/bin/env python
import os
import json
import sys
from sys import stdin
from sys import exit

import time as Time
import datetime

import numpy as np

import ligo.gracedb.rest
from pylal import SnglInspiralUtils

from EM_Bright import genDiskMassProbability
from EM_Bright import getEllipsoidSamples

import ConfigParser
import optparse

#########################################################################################

def getCoinc(graceid, gracedb_url, coinc_path, psd_path):
    '''
    Attempts to fetch a coinc and psd files of a given graceID from graceDB.
    Saves the files in the supplied coinc and psd paths.
    Returns zero if the fetching is successful.
    Returns one upon failure.
    '''
    gracedb = ligo.gracedb.rest.GraceDb( gracedb_url )

    try:
        coinc_object = gracedb.files(graceid, "coinc.xml")
        coinc_file = open(os.path.join( coinc_path, 'coinc_' + graceid + '.xml'), 'w')
        coinc_file.writelines(coinc_object.read())
        coinc_file.close()

        psd_object = gracedb.files(graceid, "psd.xml.gz")
        psd_file = open( os.path.join( psd_path, 'psd_' + graceid + '.xml.gz'), 'w')
        psd_file.writelines(psd_object.read())
        psd_file.close()

        return 0

    except:
        return 1

def readCoinc(CoincFile):
    '''
    Reads the coinc file. Finds the highest SNR IFO and returns the point estimates of the same.
    '''
    ifo   = []
    mass1 = []
    mass2 = []
    chi1  = []
    snr   = []
    for row in SnglInspiralUtils.ReadSnglInspiralFromFiles( CoincFile ):
        ifo.append( row.ifo )
        mass1.append( row.mass1 )
        mass2.append( row.mass2 )
        chi1.append( row.spin1z )
        snr.append( row.snr )

    index = np.argmax( snr ) ## To return highest SNR IFO point estimates

    return [mass1[index], mass2[index], chi1[index], snr[index], str(ifo[index])]

######### Options to be parsed from the command line ####################################

parser = optparse.OptionParser()

parser.add_option("-G", "--graceid", action="store", type="string", metavar=" NAME", 
    help="The GraceDB ID of the event on which the EM-Bright codes need to be run.")

parser.add_option("-C", "--configfile", action="store", type="string", metavar=" NAME", 
    help="The name of the config file")

(opts, args) = parser.parse_args()

### Sanity checks ###
if not opts.configfile:
    print 'Must provide config file...'
    exit(1)

if not opts.graceid:
    print 'Must provide graceid'
    exit(1)

#########################################################################################

### Reading information from config file ###
configParser = ConfigParser.ConfigParser()
configParser.read( opts.configfile)

gracedb_url       = configParser.get('gracedb', 'gracedb_url')
coinc_path        = configParser.get('Paths', 'coincPath') ## Where coinc files are to be stored
psd_path          = configParser.get('Paths', 'psdPath') ## Where psd files are to be stored
source_class_path = configParser.get('Paths', 'results') ## Where the result .json file is saved
log_path          = configParser.get('Paths', 'logs')

ellipsoidSample  = configParser.getint('EMBright', 'elipsoidSample') ## Number of samples within ellipsoid 
remMassThreshold = configParser.getfloat('EMBright', 'remMassThreshold')

forced     = configParser.getboolean('EMBright', 'Forced')
gdbwrite   = configParser.getboolean('gracedb', 'gdbwrite')
write_text = configParser.getboolean('EMBright', 'writeText')

f_low  = configParser.getfloat('EMBright', 'fmin')
mc_cut = configParser.getfloat('EMBright', 'chirpmass_cut')

lowMass_approx  = configParser.get('EMBright', 'lowMass_approx')
highMass_approx = configParser.get('EMBright', 'highMass_approx')

tagnames = configParser.get('gracedb', 'tagnames').split()

#########################################################################################

### set up directories
try:
    os.system('mkdir -p ' + log_path)

except:
    print 'Could not create logs directory...'
    exit(1)

logFileName = log_path + '/log_' + opts.graceid + '.txt'
log = open(logFileName, 'a')
log.writelines(str(datetime.datetime.today()) + '\t' + 'Analyzing event: ' + opts.graceid + '\n')

try:
    os.system('mkdir -p ' + coinc_path)
    log.writelines(str(datetime.datetime.today()) + '\t' + 'Successfully created coinc directory\n')

    os.system('mkdir -p ' + psd_path)
    log.writelines(str(datetime.datetime.today()) + '\t' + 'Successfully created psd directory\n')

    os.system('mkdir -p ' + source_class_path)
    log.writelines(str(datetime.datetime.today()) + '\t' + 'Successfully created results directory\n')

except:
    log.writelines(str(datetime.datetime.today()) + '\t' + 'Failed to creat coinc and/or psd and/or results directory, Check write privilege to the given path\n')
    exit(1)

#########################################################################################

### fetch coinc and psd files. By assumption, these must exist for this script to be run
### therefore, we only try to download them once

log.writelines(str(datetime.datetime.today()) + '\t' + 'Fetching coinc and psd file.\n')
if getCoinc(opts.graceid, gracedb_url, coinc_path, psd_path): ### this failed, so we report that and exit
    log.writelines(str(datetime.datetime.today()) + '\t' + 'Could not fetch coinc and/or psd files\n')
    exit(1)

else:
    log.writelines(str(datetime.datetime.today()) + '\t' + 'Successfully fetched coinc and/or psd files\n')

#########################

### perform the classification computation
start = Time.time()

### extract point estimates from search
[mass1, mass2, chi1, snr, ifo] = readCoinc( [os.path.join(coinc_path, "coinc_"+opts.graceid+".xml")] )

if write_text: ### Write the masses, spin and highest SNR in a text file in the all_coinc directory
    File = open( os.path.join(coinc_path,  'masses_chi1_' + opts.graceid + '.dat'), 'w')
    File.writelines(opts.graceid + '\t' + str(mass1) + '\t' +  str(mass2) + '\t' + str(chi1) + '\t' + str(snr) + '\n')
    File.close()

### generate samples
samples_sngl = getEllipsoidSamples.getSamples( opts.graceid, 
                                               mass1, 
                                               mass2, 
                                               chi1, 
                                               snr, 
                                               ellipsoidSample, 
                                               {ifo + '=' + os.path.join(psd_path, 'psd_' + opts.graceid + '.xml.gz')}, 
                                               fmin            = f_low, 
                                               NMcs            = 10, ### FIXME: should these be hard coded?
                                               NEtas           = 10, 
                                               NChis           = 10, 
                                               mc_cut          = mc_cut, 
                                               lowMass_approx  = lowMass_approx, 
                                               highMass_approx = highMass_approx, 
                                               Forced          = forced, 
                                               logFile         = logFileName, 
                                               saveData        = True,
                                             )
log.writelines(str(datetime.datetime.today()) + '\t' + 'Created ambiguity ellipsoid samples\n')

### FIXME: Currently NaNs are generated when the ellipsoid generation failed. 
###        This will be changed in subsequent version.
if np.any( np.isnan(samples_sngl[0]) ): ### there were NANs, so we set up point estimate as samples_sngl

    ### report that this failed
    log.writelines(str(datetime.datetime.today()) + '\t' + 'Ellipsoid generation failed. Computing probabilities from trigger point estimates. \n')

    ### set up the "samples" as a single point estimate
    mchirp = ((mass1 * mass2)**(3./5.))/((mass1 + mass2)**(1./5.))
    eta    = (mass1 * mass2)/((mass1 + mass2)**2)

    samples_sngl = np.array([[ mchirp, eta, chi1]])

    ### ensure this will *not* be labeled "lvem"
    ### FIXME: we hard code this for the moment, but may want to specify this up in the config file
    if "lvem" in tagnames:
        tagnames.remove("lvem")

    ### begin message for GraceDb specifying how samples were generated
    message = 'Ellipsoid generation code failed. Computing EM-Bright probabilities from triggered point estimates: '

else:
    ### begin message for GraceDb specifying how samples were generated
    message = 'EM-Bright probabilities computed from detection pipeline: '

#########################
### compute probabilities

### instantiate our object
diskMassObject_sngl = genDiskMassProbability.genDiskMass(samples_sngl, 'test', remMassThreshold)

### compute probabilities
_, NS_prob_2_sngl, _ = diskMassObject_sngl.fromEllipsoidSample()
em_bright_prob_sngl  = diskMassObject_sngl.computeEMBrightProb()

### round probabilities
NS_prob_2_sngl      = np.round(NS_prob_2_sngl, 0)
em_bright_prob_sngl = np.round(em_bright_prob_sngl, 0)

### format message for GraceDb
message += 'The probability of second object being a neutron star  = ' + str(NS_prob_2_sngl) + '% \n  The probability of remnant mass outside the black hole in excess of ' + str(remMassThreshold) + ' M_sun = '  + str(em_bright_prob_sngl) + '% \n'

end = Time.time()
log.writelines(str(datetime.datetime.today()) + '\t' + 'Time taken in computing EM-Bright probabilities = ' + str(end - start) + '\n')

### save output
filename = os.path.join(source_class_path, 'Source_Classification_' + opts.graceid + '.json')
file_obj = open(filename, 'w')
file_obj.write( json.dumps( {'Prob NS2':NS_prob_2_sngl, 'Prob EMbright':em_bright_prob_sngl} ) )
file_obj.close()

### upload to GraceDb
if gdbwrite:
    gdb = ligo.gracedb.rest.GraceDb( gracedb_url )
    gdb.writeLog(opts.graceid, message, filename=filename, tagname=tagnames)
